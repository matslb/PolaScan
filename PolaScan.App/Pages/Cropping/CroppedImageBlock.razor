@using PolaScan.App.Models;
@using static PolaScan.App.Models.Enums;
@using PolaScan.App.Services;

@inject PolaScanApiService polaScanClient;
@inject GoogleTimelineService timelineService;
@inject ImageHandler imageHandler;


<div class="image-block @GetClass(@Polaroid.ToBeSaved)">

    <div class="preview">
        @if(Polaroid.PreviewData == null || Polaroid.PreviewData == string.Empty)
        {
        <div class="placeholder">
            <Icon IconName="spinner" Size="2"></Icon>
        </div>
        }else{
            <img src="@Polaroid.PreviewData" width="300" />
        }
        
        <div class="button-group">
            <button class="rotate-left" @onclick="() => Rotate(-.1)"><Icon IconName="rotate-left" /></button>
            <button class="left" @onclick="() => Move(2, 0)"><Icon IconName="arrow-left" /></button>
            <button class="top" @onclick="() => Move(0, 2)"><Icon IconName="arrow-up" /></button>
            <button class="bottom" @onclick="() => Move(0, -2)"><Icon IconName="arrow-down" /></button>
            <button class="right" @onclick="() => Move(-2,0)"><Icon IconName="arrow-right" /></button>
            <button class="rotate-right" @onclick="() => Rotate(.1)"><Icon IconName="rotate-right" /></button>
            <button class="zoom-in" @onclick="() => Zoom(2)"><Icon IconName="magnifying-glass-plus" /></button>
            <button class="zoom-out" @onclick="() => Zoom(-2)"><Icon IconName="magnifying-glass-minus" /></button>
        </div>
    </div>
    <div class="meta">

        @if(Polaroid.Date != null)
        {
            <div class="meta-item date">
                <Icon IconName="calendar-days" Size="1"/>
                <InputField Callback="@SetDate" Type="@InputType.date"  Value="@Polaroid.Date.Value.ToString("yyyy-MM-dd")" />
            </div>
            <div class="meta-item hour">
                <Icon IconName="clock" Size="1" />
                <input type="number" value="@Polaroid.Hour" max="24" min="1" @onchange="SetHour" />
            </div>
        }
        else if (DetectDateHasRun && Polaroid.Date is null)
        {
            <div class="meta-item date">
                <Icon IconName="calendar-days" Size="1" />
                <div>
                    <button class="btn green" @onclick="async() => Polaroid.Date = DateOnly.FromDateTime(DateTime.Today)">Add Date</button>
                </div>
            </div>
        }
        else
        {
            <div class="meta-item date">
                <Icon IconName="calendar-days" Size="1" />
                <div>
                    <button disabled class="btn green"><Icon IconName="circle-notch" Size="1" /><span>Detecting date</span></button>
                </div>
            </div>
        }

        <div class="meta-item location">
            <Icon IconName="map-location-dot" Size="1"/>
            <div>
            @if (Polaroid.Location != null)
            {
                <a href="@GetLocationLink()">@Polaroid.Location.Name</a>
                <div class="map_wrapper">
                    <LocationSelector @ref="@locationSelector" LocationMeta="@Polaroid.Location" LocationUpdateCallback="UpdateLocation" />
                </div>
            }
            else
            {
                <button class="btn red" @onclick="async() =>
                    {
                        var location = await Geolocation.Default.GetLastKnownLocationAsync();
                        Polaroid.Location = new LocationMeta{
                            Latitude = location.Latitude,
                            Longitude = location.Longitude
                        };
                    }">Add location</button>
            }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PolaroidWithMeta Polaroid {get;set;}
    private bool DetectDateHasRun = false;
    private LocationSelector locationSelector { get; set; }

    private string SetDate(string date)
    {
        try
        {
            Polaroid.Date = DateOnly.Parse(date);
            UpdatePhotoMeta().ConfigureAwait(false);
            if (Polaroid.Location != null)
                locationSelector?.SetMarker(Polaroid.Location).ConfigureAwait(false);
        }
        catch
        {
        }
        return date;
    }

    private void SetHour(ChangeEventArgs e)
    {
        Polaroid.Hour = int.Parse((string)e.Value);
        UpdatePhotoMeta().ConfigureAwait(false);
        if(Polaroid.Location != null)
            locationSelector?.SetMarker(Polaroid.Location).ConfigureAwait(false);
    }

    private void UpdateLocation(LocationMeta locationMeta)
    {
        Polaroid.Location = locationMeta;
        UpdatePhotoMeta(false).ConfigureAwait(false);
    }

    private string GetLocationLink()
    {
        if(Polaroid.Location?.Name != null)
            return $"https://www.google.com/maps/place/{Polaroid.Location.Name.Replace(" ", "+")}";

        return string.Empty;
    }

    private async Task UpdatePhotoMeta(bool useTimeLineService = true)
    {
        if (Polaroid.Date != null && Polaroid.Date.Value.Year != DateTimeOffset.MinValue.Year)
        {
            if(useTimeLineService)
                Polaroid.Location = timelineService.GetDateLocation(Polaroid.Date!.Value, Polaroid.Hour);

           if(Polaroid.Location != null && string.IsNullOrEmpty(Polaroid.Location.Name))
          {
                Polaroid.Location.Name = await polaScanClient.GetAddressFromCoordinatesAsync(Polaroid.Location);
            }
        }
        StateHasChanged();
    }

    private string GetClass(bool tobesaved)
    {
        return tobesaved ? "save" : "";
    }

    private void SetShouldSave(ChangeEventArgs e)
    {
        Polaroid.ToBeSaved = (bool) e.Value;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        if (Polaroid.TempFileName == null)
            Polaroid = await imageHandler.GetPolaroidFromScan(Polaroid);
        if (string.IsNullOrEmpty(Polaroid.PreviewData))
            Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
        DetectDateHasRun = true;
        await UpdatePhotoMeta();
    }

    private async Task Move(int x, int y)
    {
        Polaroid.Crop = new SixLabors.ImageSharp.Rectangle(Polaroid.Crop.X + x, Polaroid.Crop.Y + y, Polaroid.Crop.Width, Polaroid.Crop.Height);
        Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
    }

    private async Task Rotate(double degrees)
    {
        Polaroid.Rotation += (float)degrees;
        Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
    }

    private async Task Zoom(int x)
    {
        Polaroid.Crop = new SixLabors.ImageSharp.Rectangle(Polaroid.Crop.X + x, Polaroid.Crop.Y + x, Polaroid.Crop.Width - x, Polaroid.Crop.Height - x );
        Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
    }
}
