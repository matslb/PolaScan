@using Microsoft.ApplicationInsights;
@using Microsoft.Maui.Controls.PlatformConfiguration;
@using PolaScan.App.Models;
@using static PolaScan.App.Models.Enums;
@using PolaScan.App.Services;

@inject PolaScanApiService polaScanClient;
@inject GoogleTimelineService timelineService;
@inject ImageHandler imageHandler;
@inject TelemetryClient telemetryClient;

<div class="@GetClass()">

    <div class="preview">
        @if (Image.PreviewData == null || Image.PreviewData == string.Empty)
        {
            <div class="placeholder">
                <Icon IconName="circle-notch" Color="AppColor.white" Size="2"></Icon>
            </div>
        }
        else
        {
            <img src="@Image.PreviewData" width="300" />
        }

        <div class="button-group">
            <button class="rotate-left" @onclick="() => Rotate(-.1)"><Icon IconName="rotate-left" /></button>
            <button class="left" @onclick="() => Move(3, 0)"><Icon IconName="arrow-left" /></button>
            <button class="top" @onclick="() => Move(0, 3)"><Icon IconName="arrow-up" /></button>
            <button class="bottom" @onclick="() => Move(0, -3)"><Icon IconName="arrow-down" /></button>
            <button class="right" @onclick="() => Move(-3,0)"><Icon IconName="arrow-right" /></button>
            <button class="rotate-right" @onclick="() => Rotate(.1)"><Icon IconName="rotate-right" /></button>
            <button class="zoom-in" @onclick="() => Zoom(5)"><Icon IconName="magnifying-glass-plus" /></button>
            <button class="zoom-out" @onclick="() => Zoom(-5)"><Icon IconName="magnifying-glass-minus" /></button>
        </div>
    </div>
    <div class="meta">

        @if (Image.Date != null)
        {
            <div class="meta-item hour">
                <Icon IconName="clock" Size="1" Color="AppColor.green" />
                <input type="number" value="@Image.Hour" max="24" min="1" @onchange="SetHour" />
            </div>
            <div class="meta-item date">
                <Icon IconName="calendar-days" Color="AppColor.blue" Size="1" />
                <InputField Callback="@SetDate" Type="@InputType.date" Value="@Image.Date.Value.ToString("yyyy-MM-dd")" />
            </div>
        }
        else if (DetectDateHasRun && Image.Date is null)
        {
            <div class="meta-item date">
                <Icon IconName="calendar-days" Color="AppColor.blue" Size="1" />
                <div>
                    <button class="btn green" @onclick="async() => Image.Date = DateOnly.FromDateTime(DateTime.Today)">Add Date</button>
                </div>
            </div>
        }
        else
        {
            <div class="meta-item date">
                <Icon IconName="calendar-days" Size="1" Color="AppColor.blue" />
                <div>
                    <button disabled class="btn green"><Icon IconName="circle-notch" Size="1" />&nbsp Detecting date</button>
                </div>
            </div>
        }

        <div class="meta-item location">
            <Icon IconName="map-location-dot" Color="AppColor.red" Size="1" />
            <div>
                @if (Image.Location != null)
                {
                    <a href="@GetLocationLink()">@Image.Location.Name</a>
                    if (Image.LocationOptions != null)
                    {
                        <ul class="location-options">
                            @foreach (var l in Image.LocationOptions.OrderBy(x => x.DateTime.Value.Ticks))
                            {
                                <button class="@GetLocationBtnClass(l)" @onclick="() => UpdateLocation(l)">@l.DateTime.Value.ToString("HH:mm")</button>
                            }
                        </ul>
                    }
                    <div class="map_wrapper">
                        <LocationSelector @ref="@locationSelector" LocationMeta="@Image.Location" LocationUpdateCallback="UpdateLocation" />
                    </div>
                }
                else
                {
                    if (LocationIsBlocked)
                    {
                        <p>Could not fetch location, change your privacy settings to allow location services</p>
                    }
                    <button class="btn red" @onclick="SetInitialLocation">Add location</button>
                }
            </div>
        </div>
    </div>
    <span class="film-type">@Constants.FilmFormats.Labels[Image.PhotoFormat]</span>
</div>

@code {
    [Parameter]
    public ImageWithMeta Image { get; set; }
    private bool DetectDateHasRun = false;
    private LocationSelector locationSelector { get; set; }
    private bool LocationIsBlocked { get; set; } = false;

    private string SetDate(string date)
    {
        try
        {
            Image.Date = DateOnly.Parse(date);
            UpdatePhotoMeta().ConfigureAwait(false);
            if (Image.Location != null)
                locationSelector?.SetMarker(Image.Location).ConfigureAwait(false);
        }
        catch
        {
        }
        return date;
    }

    private void SetHour(ChangeEventArgs e)
    {
        Image.Hour = int.Parse((string)e.Value);
        UpdatePhotoMeta().ConfigureAwait(false);
        if (Image.Location != null)
            locationSelector?.SetMarker(Image.Location).ConfigureAwait(false);

        telemetryClient.TrackEvent("Set_Hour");
    }

    private async void SetInitialLocation()
    {
        try
        {
            var location = await Geolocation.Default.GetLastKnownLocationAsync();
            UpdateLocation(new LocationMeta
                {
                    Latitude = location?.Latitude ?? 0,
                    Longitude = location?.Longitude ?? 0
                });
        }
        catch
        {
            LocationIsBlocked = true;
            StateHasChanged();
        }
    }

    private void UpdateLocation(LocationMeta locationMeta)
    {
        Image.Location = locationMeta;
        UpdatePhotoMeta(false).ConfigureAwait(false);
        locationSelector?.SetMarker(Image.Location).ConfigureAwait(false);
        telemetryClient.TrackEvent("Update_Location");
    }
    private string GetClass() => $"image-block {Image.PhotoFormat}";

    private string GetLocationBtnClass(LocationMeta l) => Image.Location == l ? "map-btn btn red selected" : "blue map-btn btn";
    private string GetLocationLink()
    {
        if (Image.Location?.Name != null)
            return $"https://www.google.com/maps/place/{Image.Location.Name.Replace(" ", "+")}";

        return string.Empty;
    }

    private async Task UpdatePhotoMeta(bool useTimeLineService = true)
    {
        if (Image.Date != null && Image.Date.Value.Year != DateTimeOffset.MinValue.Year)
        {
            if (useTimeLineService)
            {
                Image.LocationOptions = timelineService.GetDateLocations(Image.Date!.Value, Image.Hour);
                Image.Location = Image.LocationOptions.FirstOrDefault() ?? Image.Location;
            }
        }

        if (Image.Location != null && string.IsNullOrEmpty(Image.Location.Name))
        {
            Image.Location.Name = await polaScanClient.GetAddressFromCoordinatesAsync(Image.Location);
        }

        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await FirstRender();
        }
    }
    private async Task FirstRender()
    {
        if (!Image.HasBeenAnalyzed)
            Image = await imageHandler.QueueImageCrop(Image);

         if (string.IsNullOrEmpty(Image.PreviewData))
            Image = await imageHandler.CutFromScan(Image, true);
        DetectDateHasRun = true;
        await UpdatePhotoMeta();
    }

    private async Task Move(int x, int y)
    {
        Image.Crop = new SixLabors.ImageSharp.Rectangle(Image.Crop.X + x, Image.Crop.Y + y, Image.Crop.Width, Image.Crop.Height);
        Image = await imageHandler.CutFromScan(Image, true);
        telemetryClient.TrackEvent("Button_Move");
    }

    private async Task Rotate(double degrees)
    {
        Image.Rotation += (float)degrees;
        var x = degrees > 0 ? -1 : 1;
        Image.Crop = new SixLabors.ImageSharp.Rectangle(Image.Crop.X + x, Image.Crop.Y + x, Image.Crop.Width, Image.Crop.Height);
        Image = await imageHandler.CutFromScan(Image, true);
        telemetryClient.TrackEvent("Button_Rotate");
    }

    private async Task Zoom(int x)
    {
        Image.Crop = new SixLabors.ImageSharp.Rectangle(Image.Crop.X + x, Image.Crop.Y + x, Image.Crop.Width - x * 2, Image.Crop.Height - x * 2);
        Image = await imageHandler.CutFromScan(Image, true);
        telemetryClient.TrackEvent("Button_Zoom");
    }
}
