@using PolaScan.App.Models;
@using static PolaScan.App.Models.Enums;
@using PolaScan.App.Services;

@inject PolaScanApiService polaScanClient;
@inject GoogleTimelineService timelineService;
@inject ImageHandler imageHandler;

<div class="image-block @GetClass(@Polaroid.ToBeSaved)">

    <div class="preview">
        @if(Polaroid.PreviewData == null || Polaroid.PreviewData == string.Empty)
        {
        <div class="placeholder">
            <Icon IconName="spinner" Size="2"></Icon>
        </div>
        }else{
            <img src="@Polaroid.PreviewData" width="300" />
        }
      
        <div class="button-group">
            <button class="rotate-left" @onclick="() => Rotate(-.1)"><Icon IconName="rotate-left" /></button>
            <button class="left" @onclick="() => Move(2, 0)"><Icon IconName="arrow-left" /></button>
            <button class="top" @onclick="() => Move(0, 2)"><Icon IconName="arrow-up" /></button>
            <button class="bottom" @onclick="() => Move(0, -2)"><Icon IconName="arrow-down" /></button>
            <button class="right" @onclick="() => Move(-2,0)"><Icon IconName="arrow-right" /></button>
            <button class="rotate-right" @onclick="() => Rotate(.1)"><Icon IconName="rotate-right" /></button>
            <button class="zoom-in" @onclick="() => Zoom(2)"><Icon IconName="magnifying-glass-plus" /></button>
            <button class="zoom-out" @onclick="() => Zoom(-2)"><Icon IconName="magnifying-glass-minus" /></button>
        </div>
    </div>
    <div class="meta">
            @if(Polaroid.Date != null)
            {
                <div class="meta-item date">
                        <Icon IconName="calendar-days" Size="1"/>
                        <InputField Callback="@SetDate" Type="@InputType.date"  Value="@Polaroid.Date.Value.ToString("yyyy-MM-dd")" />
                </div>
                <div class="meta-item date">
                    <Icon IconName="clock" Size="1" />
                    <InputField Callback="@SetHour" Type="@InputType.number" Value="@Hour.ToString()" />
                </div>
            }
            @if (Polaroid.Location != null)
            {
                <div class="meta-item location">
                        <Icon IconName="map-pin" Size="1"/>
                       <span>@Polaroid.Location.Name</span>
                </div>
            }
        </div>
</div>

@code {
    [Parameter]
    public PolaroidWithMeta Polaroid {get;set;}

    public int Hour { get; set; } = 12;

    private string SetDate(string date)
    {
        try
        {
            Polaroid.Date = DateTimeOffset.Parse(date);
            UpdatePhotoMeta().ConfigureAwait(false);
        }
        catch
        {

        }
        return date;
    }

    private string SetHour(string hour)
    {
        var parsed = int.Parse(hour);
        Hour = parsed > 24 ? 24 : parsed < 1 ? 1 : parsed;
        
        UpdatePhotoMeta().ConfigureAwait(false);
        return Hour.ToString();
    }
    private async Task UpdatePhotoMeta()
    {
        if (Polaroid.Date != null && Polaroid.Date.Value.Year != DateTimeOffset.MinValue.Year)
        {
            Polaroid.Location = timelineService.GetDateLocation(Polaroid.Date!.Value, Hour);
            Polaroid.Location.Name = await polaScanClient.GetAddressFromCoordinatesAsync(Polaroid.Location);
        }
        StateHasChanged();
    }

    private string GetClass(bool tobesaved)
    {
        return tobesaved ? "save" : "";
    }

    private void SetShouldSave(ChangeEventArgs e)
    {
        Polaroid.ToBeSaved = (bool) e.Value;
        StateHasChanged();
    }

    protected override async void OnInitialized()
    {
        if (Polaroid.TempFileName == null)
            Polaroid = await imageHandler.GetPolaroidFromScan(Polaroid);
        if (string.IsNullOrEmpty(Polaroid.PreviewData))
            Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
       await UpdatePhotoMeta();
    }
    private async Task Move(int x, int y)
    {
        Polaroid.Crop = new SixLabors.ImageSharp.Rectangle(Polaroid.Crop.X + x, Polaroid.Crop.Y + y, Polaroid.Crop.Width, Polaroid.Crop.Height);
        Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
    }

    private async Task Rotate(double degrees)
    {
        Polaroid.Rotation += (float)degrees;
        Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
    }

    private async Task Zoom(int x)
    {
        Polaroid.Crop = new SixLabors.ImageSharp.Rectangle(Polaroid.Crop.X + x, Polaroid.Crop.Y + x, Polaroid.Crop.Width - x, Polaroid.Crop.Height - x );
        Polaroid = await imageHandler.CutPolaroidFromScan(Polaroid);
    }
}
