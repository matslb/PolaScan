@using PolaScan.App.Models;
@using static PolaScan.App.Models.Enums;

<div class="image-block @GetClass(@Polaroid.ToBeSaved)">

    <div class="preview">
        <img src="@Polaroid.PreviewData" width="300" />
        <div class="button-group">
            <button class="rotate-left" @onclick="() => Rotate(-.1)"><Icon IconName="rotate-left" /></button>
            <button class="left" @onclick="() => Move(2, 0)"><Icon IconName="arrow-left" /></button>
            <button class="top" @onclick="() => Move(0, 2)"><Icon IconName="arrow-up" /></button>
            <button class="bottom" @onclick="() => Move(0, -2)"><Icon IconName="arrow-down" /></button>
            <button class="right" @onclick="() => Move(-2,0)"><Icon IconName="arrow-right" /></button>
            <button class="rotate-right" @onclick="() => Rotate(.1)"><Icon IconName="rotate-right" /></button>
        </div>
    </div>
    <div class="meta">
        <span>
            @if(Polaroid.Date == null)
            {
                <Icon IconName="spinner" />
            }
            else{
                <Icon IconName="calendar" />
                <InputField Callback="@SetDate" Type="@InputType.date"  Value="@Polaroid.Date.Value.ToString("yyyy-MM-dd")" />
            }
        </span>
        <span>
            @if (Polaroid.Location != null)
            {
                <Icon IconName="map-pin" />
                <br />
                <label>
                    Latitude: <InputField Callback="@SetDate" Type="@InputType.text" Value="@Polaroid.Location.Latitude.ToString()"/>
                </label>
                <br />
                <label>
                    Longditude: <InputField Callback="@SetDate" Type="@InputType.text"  Value="@Polaroid.Location.Latitude.ToString()" />
                </label>
            }
        </span>
        </div>
</div>

@code {
    [Parameter]
    public PolaroidWithMeta Polaroid {get;set;}

    [Parameter]
    public ImageHandler imageHander { get; set; }

    private string SetDate(string date)
    {
        Polaroid.Date = DateTimeOffset.Parse(date);
        return date;
    }

    private string GetClass(bool tobesaved)
    {
        return tobesaved ? "save" : "";
    }

    private void SetShouldSave(ChangeEventArgs e)
    {
        Polaroid.ToBeSaved = (bool) e.Value;
        StateHasChanged();
    }

    private async Task Move(int x, int y)
    {
        Polaroid.Crop = new SixLabors.ImageSharp.Rectangle(Polaroid.Crop.X + x, Polaroid.Crop.Y + y, Polaroid.Crop.Width, Polaroid.Crop.Height);
        Polaroid = await imageHander.CutPolaroidFromScan(Polaroid);
    }

    private async Task Rotate(double degrees)
    {
        Polaroid.Rotation += (float)degrees;
        Polaroid = await imageHander.CutPolaroidFromScan(Polaroid);
    }
}
