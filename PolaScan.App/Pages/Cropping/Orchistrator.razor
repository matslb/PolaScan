@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Prediction.Models;
@using PolaScan.App.Models;
@using System.Globalization;
@using System.Collections.ObjectModel;
@using System.Diagnostics;

@{
    <div class="button-menu">
        @if (!IsStarted)
        {
            <Button class="green btn" @onclick="StartCropping">Select scans</Button>
        }
        @if ( IsStarted && !IsExported && !IsWorking)
        {
            <button class="green btn" @onclick="ExportImages">Save selected</button>
        }
        @if (IsExported)
        {
            <button class="blue btn" @onclick="OpenDestinationFolder">See photos</button>
        }
        @if (IsStarted)
        {            
            <Button class="red btn" @onclick="Cancel">Cancel</Button>
        }
    </div>
    if (IsWorking)
    {
        <div class="status-message">
            <Icon IconName="spinner" />
            <br />
            @StatusMessage
        </div>
    }
    if (IsStarted)
    {
        <ul class="image-preview">
        @foreach (var photo in PolaroidsWithMeta)
        {
           <li>
            <CroppedImageBlock imageHander="@imageHandler" Polaroid="@photo"/>
           </li> 
        }
        </ul>
    }

}
@code {
    public ObservableCollection<PolaroidWithMeta> PolaroidsWithMeta { get; set; } = new();
    public int ScanFileCount { get; set; } = 0;
    public int LocationCount { get; set; } = 0;

    public bool IsStarted { get; set; }
    public bool IsExported { get; set; }
    public bool IsWorking { get; set; }

    public string StatusMessage{ get; set; }

    public PolaScanApiClient polaScanClient = new PolaScanApiClient();
    public GoogleTimelineService timelineService = new GoogleTimelineService();
    public ImageHandler imageHandler = new ImageHandler();

    public async Task StartCropping()
    {
        IsStarted = true;
        IsWorking = true;
        var result = await FilePicker.Default.PickMultipleAsync();
        if (result.Any())
        {
            ScanFileCount = result.Count();
            LocationCount = 0;
            StatusMessage = $"Analyzing {ScanFileCount} {(ScanFileCount > 1 ? "scans" : "scan")}";
            StateHasChanged();
            var locationDic = new Dictionary<string, List<BoundingBox>>();

            foreach (var file in result)
            {
                var locations = await polaScanClient.DetectPolaroidsInImage(file.FullPath);
                LocationCount += locations.Count();
                StatusMessage = $"{LocationCount} photos detected";
                locationDic.Add(file.FullPath , locations);
                StateHasChanged();
            }

            foreach (var file in result)
            {
                (await imageHandler.GetPolaroidsFromScan(file.FullPath, locationDic[file.FullPath] )).ToList().ForEach(p =>
                {
                    p.ToBeSaved = true;
                    PolaroidsWithMeta.Add(p);
                });
                StatusMessage = $"{PolaroidsWithMeta.Count} of {LocationCount} photos cropped";
                StateHasChanged();
            }

            StateHasChanged();

            StatusMessage = $"Parsing dates and adding metadata";
            foreach (var p in PolaroidsWithMeta)
            {
                var polaroidLipSectionName = await imageHandler.SavePolaroidLipSection(p);
                p.Date = await polaScanClient.DetectDateInImage(polaroidLipSectionName, CultureInfo.CurrentCulture);
                if(p.Date != null)
                {
                    p.Location = timelineService.GetDateLocation(p.Date.Value, int.Parse(Preferences.Default.Get(Constants.Settings.AssumedHour, "12")));
                }
                StateHasChanged();
            };
        }
        IsWorking = false;
        StatusMessage = $"Finished";
        StateHasChanged();
    }

    public async Task Cancel()
    {
        PolaroidsWithMeta.Clear();
        IsStarted = false;
        IsExported = false;
        IsWorking = false;
        StatusMessage = string.Empty;
    }

    public async Task ExportImages()
    {
        foreach (var p in PolaroidsWithMeta.Where(p => p.ToBeSaved))
        {
            await imageHandler.MoveToDestination(p);
        }
        PolaroidsWithMeta.Clear();
        Helpers.DeleteTemporaryFiles();
        IsExported = true;
        IsStarted = false;
    }

    public void OpenDestinationFolder()
    {
        Process.Start("explorer.exe", Preferences.Default.Get(Constants.Settings.DesitnationPath, ""));
    }
}
