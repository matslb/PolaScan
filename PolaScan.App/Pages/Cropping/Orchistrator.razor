@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Prediction.Models;
@using Newtonsoft.Json;
@using PolaScan.App.Models;
@using System.Globalization;
@using System.Collections.ObjectModel;
@using System.Diagnostics;
@using PolaScan.App.Services;

@inject PolaScanApiService polaScanClient;
@inject GoogleTimelineService timelineService;
@inject ImageHandler imageHandler;

@implements IDisposable

@{
    <div class="button-menu">
        @if (!State.IsWorking)
        {
            <Button class="green btn" @onclick="SelectScans">Select scans</Button>
        }
        @if (State.PolaroidsWithMeta.Count > 0 && !State.IsWorking)
        {
            <button class="blue btn" @onclick="ExportImages">Save selected</button>
        }
        @if (State.IsExported)
        {
            <button class="red btn" @onclick="OpenDestinationFolder">See photos</button>
        }
    </div>
    if (State.IsWorking)
    {
        <div class="status-message">
            <Icon IconName="circle-notch" Size="2" />
            <br />
            @State.StatusMessage
        </div>
    }
    if (State.IsStarted)
    {
        <ul class="image-preview">
                
            @foreach (var photo in State.PolaroidsWithMeta)
            {
                <li class="image-item">
                    <button class="btn red zoom-out" @onclick="() => RemovePhoto(photo)"><Icon IconName="trash-can" /></button>
                    <CroppedImageBlock Polaroid="@photo" />
                </li> 
            }
            
        </ul>
    }
}
@code {

    private ProcessingState State { get; set; }
    private async Task SelectScans()
    {
        State.IsStarted = true;
        State.IsWorking = true;
        var defaultHour = int.Parse(Preferences.Default.Get(Constants.Settings.AssumedHour, "12"));
        var result = await FilePicker.Default.PickMultipleAsync();
        if (result.Any())
        {
            State.ScanFileCount = result.Count();
            State.LocationCount = 0;
            State.StatusMessage = $"Analyzing {State.ScanFileCount} {(State.ScanFileCount > 1 ? "scans" : "scan")}";
            StateHasChanged();

            foreach (var file in result)
            {
                var locations = await polaScanClient.DetectPolaroidsInImage(file.FullPath);
                State.LocationCount += locations.Count();
                State.StatusMessage = $"{State.LocationCount} photos detected";
                StateHasChanged();
                foreach (var location in locations)
                {
                    State.PolaroidsWithMeta.Add(new PolaroidWithMeta
                        {
                            Id = Guid.NewGuid(),
                            ToBeSaved = true,
                            Hour = defaultHour,
                            LocationInScan = location,
                            ScanFile = file.FullPath
                }
                    );
                    StateHasChanged();
                }       
            }
        }
        State.IsWorking = false;
        StateHasChanged();
    }

    private void Cancel()
    {
        State = new();
        Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
        imageHandler.ClearTempFiles();
    }

    private async Task ExportImages()
    {
        foreach (var p in State.PolaroidsWithMeta.Where(p => p.ToBeSaved))
        {
            await imageHandler.MoveToDestination(p);
        }
        Cancel();
        State.IsExported = true;
    }

    private void OpenDestinationFolder()
    {
        Process.Start("explorer.exe", Preferences.Default.Get(Constants.Settings.DesitnationPath, ""));
    }

    private void SaveState()
    {
        State ??= new();
        foreach( var p in State.PolaroidsWithMeta)
        {
            p.PreviewData = string.Empty;
        }
        Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
    }

    public void RemovePhoto(PolaroidWithMeta polaroid)
    {
        State.PolaroidsWithMeta.Remove(polaroid);
        if(State.PolaroidsWithMeta.Count() == 0)
        {
            Cancel();
        }
    }

    protected override void OnInitialized()
    {
        RetrieveStoredState();
    }

    public void Dispose()
    {
      SaveState();
    }

    public void RetrieveStoredState()
    {
        State = JsonConvert.DeserializeObject<ProcessingState>(Preferences.Default.Get(nameof(ProcessingState), "")) ?? new ProcessingState();
    }
}