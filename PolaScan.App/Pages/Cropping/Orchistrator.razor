@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Prediction.Models;
@using Newtonsoft.Json;
@using PolaScan.App.Models;
@using System.Globalization;
@using System.Collections.ObjectModel;
@using System.Diagnostics;
@using PolaScan.App.Pages.Settings
@using PolaScan.App.Services;
@using static PolaScan.App.Models.Enums;

@inject PolaScanApiService polaScanClient;
@inject GoogleTimelineService timelineService;
@inject ImageHandler imageHandler;

@implements IDisposable

@{
    <div class="button-menu">
        @if (!State.IsWorking)
        {
            <div>
            <Button class="green btn" @onclick="SelectScans">Select scans</Button>
            <SettingsItem Slug="@Constants.Settings.ImageFormat" OptionsDic="@Constants.ImageProcessing.PhotoFormatLabels" fieldType=InputType.select></SettingsItem>
            </div>
        }
        @if (State.PolaroidsWithMeta.Count > 0 && !State.IsWorking)
        {
             <button class="blue btn" @onclick="ExportImages">Export</button>
        }
        @if (State.IsExported)
        {
            <button class="red btn" @onclick="OpenDestinationFolder">See photos</button>
        }
    </div>
    if (State.IsWorking)
    {
        <div class="status-message">
            <Icon IconName="circle-notch" Size="2" />
            <br />
            <span>@State.StatusMessage</span>
        </div>
    }
    if (State.IsStarted)
    {
        <ul class="@ImageWrapperClass()">
                
            @foreach (var photo in State.PolaroidsWithMeta)
            {
                <li class="image-item">
                    <button class="btn red zoom-out" @onclick="() => RemovePhoto(photo)"><Icon IconName="trash-can" /></button>
                    <CroppedImageBlock Image="@photo" />
                </li> 
            }
            
        </ul>
    }
}
@code {

    private ProcessingState State { get; set; }

    private string ImageWrapperClass() => $"image-preview {(State.IsWorking ? "disabled": string.Empty )}";

    private List<string> GetFormatOptions() => new()
    {
        Constants.PhotoFormat.Polaroid,
        Constants.PhotoFormat.PolaroidGo,
        Constants.PhotoFormat.InstaxMini,
        Constants.PhotoFormat.InstaxWide,
        Constants.PhotoFormat.InstaxSquare,
    };

  private async Task SelectScans()
  {
    State.IsStarted = true;
    State.IsWorking = true;
    var defaultHour = int.Parse(Preferences.Default.Get(Constants.Settings.AssumedHour, "12"));
    var result = await FilePicker.Default.PickMultipleAsync();
    if (result.Any())
    {
      State.ScanFileCount = result.Count();
      State.LocationCount = 0;
      State.StatusMessage = $"Analyzing {State.ScanFileCount} {(State.ScanFileCount > 1 ? "scans" : "scan")}";
      StateHasChanged();

      foreach (var file in result)
      {
        var locations = await polaScanClient.DetectPolaroidsInImage(file.FullPath);
        State.LocationCount += locations.Count();
        State.StatusMessage = $"{State.LocationCount} photos detected";
        StateHasChanged();
        await Task.Delay(1);
        var format = Preferences.Default.Get(Constants.Settings.ImageFormat, Constants.PhotoFormat.Polaroid);
        foreach (var location in locations)
        {
          State.PolaroidsWithMeta.Add(new PolaroidWithMeta
                        {
                            Id = Guid.NewGuid(),
                            Hour = defaultHour,
                            LocationInScan = location,
                            ScanFile = file.FullPath,
                            PhotoFormat = format
                        }
          );
          await Task.Delay(1);
          StateHasChanged();
        }      
      }
      if(State.LocationCount == 0)
      {
        State.StatusMessage = "No photos detected";
      }
    }
    State.IsWorking = false;
    StateHasChanged();
  }

  private void Cancel()
  {
    State = new();
    Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
    imageHandler.ClearTempFiles();
    StateHasChanged();
  }

  private async Task ExportImages()
  {
    State.IsWorking = true;
    for (int i = 0; i < State.PolaroidsWithMeta.Count; i++)
    {
      State.StatusMessage = $"{i} of {State.PolaroidsWithMeta.Count} photos exported";
      var p = State.PolaroidsWithMeta[i];
      await imageHandler.PublishImage(p);
      await Task.Delay(10);
      StateHasChanged();
    }

    await Task.Delay(100);
    Cancel();
    State.IsExported = true;
  }

  private void OpenDestinationFolder()
  {
    Process.Start("explorer.exe", $"{Preferences.Default.Get(Constants.Settings.DesitnationPath, "")}\\PolaScan");
  }

  private void SaveState()
  {
    State ??= new();
    foreach( var p in State.PolaroidsWithMeta)
    {
      p.PreviewData = string.Empty;
      p.LocationOptions.Clear();
    }
        Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
    }

    public void RemovePhoto(PolaroidWithMeta polaroid)
    {
        State.PolaroidsWithMeta.Remove(polaroid);
        if(State.PolaroidsWithMeta.Count() == 0)
        {
            Cancel();
        }
    }

    protected override void OnInitialized()
    {
        RetrieveStoredState();
    }

    public void Dispose()
    {
      SaveState();
    }

    public void RetrieveStoredState()
    {
        State = JsonConvert.DeserializeObject<ProcessingState>(Preferences.Default.Get(nameof(ProcessingState), "")) ?? new ProcessingState();
    }
}
