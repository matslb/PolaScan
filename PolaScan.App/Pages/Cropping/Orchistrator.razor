@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Prediction.Models;
@using Newtonsoft.Json;
@using PolaScan.App.Models;
@using System.Globalization;
@using System.Collections.ObjectModel;
@using System.Diagnostics;
@implements IDisposable

@{
    <div class="button-menu">
        @if (!State.IsStarted)
        {
            <Button class="green btn" @onclick="StartCropping">Select scans</Button>
        }
        @if (State.IsStarted && !State.IsExported && !State.IsWorking)
        {
            <button class="green btn" @onclick="ExportImages">Save selected</button>
        }
        @if (State.IsExported)
        {
            <button class="blue btn" @onclick="OpenDestinationFolder">See photos</button>
        }
        @if (State.IsStarted)
        {            
            <Button class="red btn" @onclick="Cancel">Cancel</Button>
        }
    </div>
    if (State.IsWorking)
    {
        <div class="status-message">
            <Icon IconName="spinner" />
            <br />
            @State.StatusMessage
        </div>
    }
    if (State.IsStarted)
    {
        <ul class="image-preview">
            @foreach (var photo in State.PolaroidsWithMeta)
        {
           <li>
            <CroppedImageBlock imageHander="@imageHandler" googleTimelineService="@timelineService" Polaroid="@photo"/>
           </li> 
        }
        </ul>
    }

}
@code {
    private ProcessingState State { get; set; }

    private PolaScanApiClient polaScanClient = new PolaScanApiClient();
    private GoogleTimelineService timelineService = new GoogleTimelineService();
    private ImageHandler imageHandler = new ImageHandler();

    private async Task StartCropping()
    {
        State.IsStarted = true;
        State.IsWorking = true;
        var result = await FilePicker.Default.PickMultipleAsync();
        if (result.Any())
        {
            State.ScanFileCount = result.Count();
            State.LocationCount = 0;
            State.StatusMessage = $"Analyzing {State.ScanFileCount} {(State.ScanFileCount > 1 ? "scans" : "scan")}";
            StateHasChanged();
            var locationDic = new Dictionary<string, List<BoundingBox>>();

            foreach (var file in result)
            {
                var locations = await polaScanClient.DetectPolaroidsInImage(file.FullPath);
                State.LocationCount += locations.Count();
                State.StatusMessage = $"{State.LocationCount} photos detected";
                locationDic.Add(file.FullPath , locations);
                StateHasChanged();
            }

            foreach (var file in result)
            {
                (await imageHandler.GetPolaroidsFromScan(file.FullPath, locationDic[file.FullPath] )).ToList().ForEach(p =>
                {
                    p.ToBeSaved = true;
                    State.PolaroidsWithMeta.Add(p);
                });
                State.StatusMessage = $"{State.PolaroidsWithMeta.Count} of {State.LocationCount} photos cropped";
                StateHasChanged();
            }

            StateHasChanged();

            State.StatusMessage = $"Parsing dates and adding metadata";
            foreach (var p in State.PolaroidsWithMeta)
            {
                var polaroidLipSectionName = await imageHandler.SavePolaroidLipSection(p);
                p.Date = await polaScanClient.DetectDateInImage(polaroidLipSectionName, CultureInfo.CurrentCulture);
                if(p.Date != null)
                {
                    p.Location = timelineService.GetDateLocation(p.Date.Value, int.Parse(Preferences.Default.Get(Constants.Settings.AssumedHour, "12")));
                }
                if(p.Location != null)
                {
                    p.Location.Name = await polaScanClient.GetAddressFromCoordinates(p.Location);
                }
                StateHasChanged();
            };
        }
        State.IsWorking = false;
        State.StatusMessage = $"Finished";
        StateHasChanged();
    }

    private void Cancel()
    {
        State = new();
        Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
        Helpers.DeleteTemporaryFiles();
    }

    private async Task ExportImages()
    {
        foreach (var p in State.PolaroidsWithMeta.Where(p => p.ToBeSaved))
        {
            await imageHandler.MoveToDestination(p);
        }
        Cancel();
        State.IsExported = true;
    }

    private void OpenDestinationFolder()
    {
        Process.Start("explorer.exe", Preferences.Default.Get(Constants.Settings.DesitnationPath, ""));
    }

    private void SaveState()
    {
        foreach( var p in State.PolaroidsWithMeta)
        {
            p.PreviewData = string.Empty;
        }
        Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
    }

    protected override void OnInitialized()
    {
        RetrieveStoredState();
    }

    public void Dispose()
    {
        SaveState();
    }

    public void RetrieveStoredState()
    {
        State = JsonConvert.DeserializeObject<ProcessingState>(Preferences.Default.Get(nameof(ProcessingState), "")) ?? new ProcessingState();
    }
}