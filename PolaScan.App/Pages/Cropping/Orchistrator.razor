@using Microsoft.ApplicationInsights;
@using Microsoft.ApplicationInsights.DataContracts;
@using Microsoft.Azure.CognitiveServices.Vision.CustomVision.Prediction.Models;
@using Microsoft.Extensions.Logging;
@using Newtonsoft.Json;
@using PolaScan.App.Models;
@using System.Globalization;
@using System.Collections.ObjectModel;
@using System.Diagnostics;
@using PolaScan.App.Pages.Settings
@using PolaScan.App.Services;
@using static PolaScan.App.Models.Enums;

@inject PolaScanApiService polaScanClient;
@inject ImageHandler imageHandler;
@inject TelemetryClient telemetryClient;

@implements IDisposable

@{
    <div class="button-menu">
        @if (!State.IsWorking)
        {
            <div class="scan-btn-wrapper">
                <Button class="green btn" @onclick="SelectScans">Select scans</Button>
                <br />
                <SettingsItem Slug="@Constants.Settings.ImageFormat" OptionsDic="@Constants.FilmFormats.Labels" fieldType=InputType.select></SettingsItem>
            </div>
        }
        @if (State.PolaroidsWithMeta.Count > 0 && !State.IsWorking)
        {
            <button class="blue btn" @onclick="ExportImages">Export</button>
        }
        @if (State.IsExported)
        {
            <button class="red btn" @onclick="OpenDestinationFolder">See photos</button>
        }
    </div>
   
    @if (State.StatusMessage != null && State.IsWorking)
    {
        <div class="status-message">
            @if(State.IsWorking){
                <Icon IconName="circle-notch" Size="2" />
            }
            <br />
            <span>@State.StatusMessage</span>
        </div>
    }
    @if (State.StatusMessage != null && State.IsError)
    {
        <div class="error-message">
            <Icon IconName="circle-exclamation" Color="AppColor.red" Size="2" />
            <span>@State.StatusMessage</span>
        </div>
    }
    if (State.IsStarted)
    {
        <ul class="@ImageWrapperClass()">

            @foreach (var photo in State.PolaroidsWithMeta)
            {
                <li class="image-item">
                    <button class="btn red zoom-out" @onclick="() => RemovePhoto(photo)"><Icon IconName="trash-can" /></button>
                    <CroppedImageBlock Image="@photo" />
                </li>
            }
        </ul>
    }
}
@code {

    private ProcessingState State { get; set; }

    private string ImageWrapperClass() => $"image-preview {(State.IsWorking ? "disabled" : string.Empty)}";

    private List<string> GetFormatOptions() => new()
    {
        Constants.FilmFormats.Polaroid,
        Constants.FilmFormats.PolaroidGo,
        Constants.FilmFormats.InstaxMini,
        Constants.FilmFormats.InstaxWide,
        Constants.FilmFormats.InstaxSquare,
    };

    private async Task SelectScans()
    {
        Cancel();
        State.IsWorking = true;
        State.IsStarted = true;
        var defaultHour = int.Parse(Preferences.Default.Get(Constants.Settings.AssumedHour, "12"));
        var result = await FilePicker.Default.PickMultipleAsync();
        var detectedImages = new List<ImageWithMeta>();
        if (result.Any())
        {
            State.ScanFileCount = result.Count();
            State.LocationCount = 0;
            State.StatusMessage = $"Analyzing {State.ScanFileCount} {(State.ScanFileCount > 1 ? "scans" : "scan")}";
            StateHasChanged();
            try {
                foreach (var file in result)
                {
                    var locations = await polaScanClient.AnalyzeScanFile(file);
                    State.LocationCount += locations.Count();
                    State.StatusMessage = $"{State.LocationCount} photos detected";
                    StateHasChanged();
                    var format = Preferences.Default.Get(Constants.Settings.ImageFormat, Constants.FilmFormats.Polaroid);

                    foreach (var location in locations)
                    {
                        detectedImages.Add(new ImageWithMeta
                            {
                                Id = Guid.NewGuid(),
                                Hour = defaultHour,
                                LocationInScan = location,
                                ScanFile = file.FullPath,
                                PhotoFormat = format
                            });
                    }
                }
                if (State.LocationCount == 0)
                {
                    State.StatusMessage = "No photos detected";
                }
                State.StatusMessage = null;
            }
            catch (Exception e)
            {
                State.IsError = true;
                State.StatusMessage = e.Message;
            }
        }
        State.IsWorking = false;
        State.PolaroidsWithMeta.AddRange(detectedImages);
        StateHasChanged();
    }

    private void Cancel()
    {
        State = new();
        Preferences.Default.Set(nameof(ProcessingState), JsonConvert.SerializeObject(State));
        imageHandler.ClearTempFiles();
        StateHasChanged();
    }

    private async Task ExportImages()
    {
        State.IsWorking = true;
        var watch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < State.PolaroidsWithMeta.Count; i++)
        {
            State.StatusMessage = $"{i} of {State.PolaroidsWithMeta.Count} photos exported";
            var p = State.PolaroidsWithMeta[i];
            await imageHandler.PublishImage(p);
            await Task.Delay(10);
            StateHasChanged();
        }

        watch.Stop();

        telemetryClient.TrackEvent("Export_photos", new Dictionary<string, string>
            {
                {"Photos_exported", State.PolaroidsWithMeta.Count.ToString()},
                {"export_milliseconds", $"{(watch.ElapsedMilliseconds).ToString()}" }
            });
        await Task.Delay(100);
        Cancel();
        State.IsExported = true;
    }

    private void OpenDestinationFolder()
    {
        Process.Start("explorer.exe", $"{Preferences.Default.Get(Constants.Settings.DesitnationPath, "")}\\PolaScan");
        telemetryClient.TrackEvent("Button_View_Photos");
    }

    private void SaveState()
    {
        State ??= new();
        foreach (var p in State.PolaroidsWithMeta)
        {
            p.PreviewData = string.Empty;
        }
        Helpers.StoreAsJson(State, nameof(ProcessingState));
    }

    public void RemovePhoto(ImageWithMeta polaroid)
    {
        State.PolaroidsWithMeta.Remove(polaroid);
        if (State.PolaroidsWithMeta.Count() == 0)
        {
            Cancel();
        }
        telemetryClient.TrackEvent("Button_Remove_Photo");
    }

    protected override void OnInitialized()
    {
        RetrieveStoredState();
    }

    public void Dispose()
    {
        SaveState();
    }

    public void RetrieveStoredState()
    {
        var storedState = Helpers.GetStoredValue<ProcessingState>(nameof(ProcessingState));
        if (storedState.IsWorking)
            State = new ProcessingState();
        else
            State = storedState;
    }
}
