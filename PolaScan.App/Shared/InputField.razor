@using CommunityToolkit.Maui.Storage;
@using static PolaScan.App.Models.Enums

@inject IFolderPicker folderPicker;
@{
    switch(Type)
    {
       case InputType.folder:
            <button class="btn blue" @onclick="SelectFolder">Select Folder</button>

            break;  
       case InputType.date:
            <input type="date" value="@Value" @oninput="GetValueFromChangeEvent">
 
            break;
       case InputType.number:
            <input type="number" min="@Min" max="@Max" value="@Value" @onchange="GetValueFromChangeEvent">

            break;
        case InputType.file:
            <button class="btn blue" @onclick="SelectFile">Select file</button>

            break;
        case InputType.select:
            <select @oninput="GetValueFromChangeEvent">
                @if (Options != null)
                {
                    foreach (var option in Options)
                    {
                        if(@option == @Value){
                            <option selected>@option</option>
                        }else{
                            <option >@option</option>
                        }
                    }
                }
            @if (OptionsDic != null)
            {
                foreach (var option in OptionsDic)
                {
                    if (@option.Key == @Value)
                    {
                        <option value="@option.Key" selected>@option.Value</option>
                    }
                    else
                    {
                        <option value="@option.Key">@option.Value</option>
                    }
                }
            }
            </select>
            break;

        default:
            <input type="text" value="@Value" @oninput="GetValueFromChangeEvent">
            break;                   
    }
}
@code {

    [Parameter]
    public InputType Type { get; set; }

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public List<string> Options { get; set; } = new();

    [Parameter]
    public Dictionary<string, string> OptionsDic { get; set; } = new();

    [Parameter]
    public Func<string, string> Callback {get; set;}

    [Parameter]
    public int Min { get; set; }

    [Parameter]
    public int Max { get; set; }


    public void GetValueFromChangeEvent(ChangeEventArgs e){
        Callback(e.Value.ToString());
    }

    public async Task SelectFolder(){
        var result = await FolderPicker.Default.PickAsync("", new CancellationToken());
        
        if(result.IsSuccessful)
            Callback(result.Folder.Path);
    }

    public async Task SelectFile()
    {
        var result = await FilePicker.Default.PickAsync();
        if(result != null)
            Callback(result.FullPath);
    }
}
